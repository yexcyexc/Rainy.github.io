<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>位运算基本知识浅谈</title>
    <url>/2021/10/28/Bitwise-Operation/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们知道，计算机中所有数都是二进制存储的</p>
<p>位运算就是对正数的二进制位进行的运算</p>
<span id="more"></span>
<h1 id="运算说明"><a href="#运算说明" class="headerlink" title="运算说明"></a>运算说明</h1><p>首先明确一点，位运算是对正数进行的运算，所以下面的各语句中，变量类型均默认定义为<code>int</code></p>
<h2 id="按位取反not"><a href="#按位取反not" class="headerlink" title="按位取反not"></a>按位取反not</h2><p>表达式<code>~a</code>，按二进制位运算，将每一位取反</p>
<p>简单来说，即“0变1，1变0”</p>
<h2 id="左移shl"><a href="#左移shl" class="headerlink" title="左移shl"></a>左移shl</h2><p>表达式<code>a &lt;&lt; n</code>，其中<code>n</code>为正整数，表示在二进制下，将<code>a</code>左移<code>n</code>位（在<code>a</code>的二进制表示后面添上<code>n</code>个0）</p>
<p>实际上等于$a*2^n$</p>
<h2 id="右移shr"><a href="#右移shr" class="headerlink" title="右移shr"></a>右移shr</h2><p>表达式<code>a &gt;&gt; n</code>，其中<code>n</code>为正整数，表示在二进制下，将<code>a</code>右移<code>n</code>位（将<code>a</code>的二进制表示后面<code>n</code>位舍弃）</p>
<p>实际上等于$\lfloor{\frac{a}{2^n}}\rfloor$</p>
<h2 id="按位与and"><a href="#按位与and" class="headerlink" title="按位与and"></a>按位与and</h2><p>表达式<code>a &amp; b</code>，按二进制位运算，位数较小的补齐前导0，对于每一位，二进制表示均为1，则结果为1，否则为0</p>
<p>简单来说，即“有0得0，全1得1”</p>
<h2 id="按位或or"><a href="#按位或or" class="headerlink" title="按位或or"></a>按位或or</h2><p>表达式<code>a | b</code>，按二进制位运算，位数较小的补齐前导0，对于每一位，二进制表示均为0，则结果为0，否则为1</p>
<p>简单来说，即“有1得1，全0得0”</p>
<h2 id="按位异或xor"><a href="#按位异或xor" class="headerlink" title="按位异或xor"></a>按位异或xor</h2><p>表达式<code>a ^ b</code>，按二进制位运算，位数较小的补齐前导0，对于每一位，二进制表示两变量相异为1，相同为0</p>
<p>简单来说，即“相同得0，相异得1”</p>
<h3 id="异或的逆运算"><a href="#异或的逆运算" class="headerlink" title="异或的逆运算"></a>异或的逆运算</h3><p>异或的逆运算是它本身，也就是说，一个值两次异或同一个值，最后得到它本身，即<code>a == a ^ b ^ b</code></p>
<h3 id="异或的简单运用"><a href="#异或的简单运用" class="headerlink" title="异或的简单运用"></a>异或的简单运用</h3><p>由<code>“异或的逆运算是它本身”</code>，我们可以发散思维，得出异或的一些简单运用</p>
<h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>如果你得到一个整数作为明文，想要加密，最简单的方法就是选取另一个整数作为密钥，对明文和密钥进行异或运算，结果即为得到的暗文，而接收暗文的人只需手持一样的密钥，将暗文与密钥进行异或运算，即可重新得到明文</p>
<h4 id="（似乎没有什么用的）-不需要中间变量的交换过程"><a href="#（似乎没有什么用的）-不需要中间变量的交换过程" class="headerlink" title="（似乎没有什么用的） 不需要中间变量的交换过程"></a><del>（似乎没有什么用的）</del> 不需要中间变量的交换过程</h4><p>现在，有两个变量，<code>a</code>与<code>b</code>，需要将两个变量的值交换，又不想定义中间变量，那可以考虑用异或运算进行交换，代码是这样的：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a ^= b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure><br>现在来考虑这段代码执行交换的合理性，之前提到过，<code>a == a ^ b ^ b</code>，那么第一行中<code>a ^= b</code>后<code>a</code>的值变为<code>a ^ b</code>，再到第二行执行时，相当于<code>b</code>的值被重新赋值为<code>a ^ b ^ b</code>，也就是<code>a</code>变量的初值，最后到第三行执行时，<code>a</code>的值则被赋值为<code>a ^ b ^ a</code>，也就成了<code>b</code>变量的初值，完整实现了交换功能</p>
<p>小拓展：</p>
<p>上述交换功能的本质是对于互逆运算的如下利用：</p>
<p>定义符号$与#，使之互为逆运算</p>
<p>对于如下代码块<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &lt;- a # b</span><br><span class="line">b &lt;- a $ b</span><br><span class="line">a &lt;- a $ b</span><br></pre></td></tr></table></figure><br>执行第一句后<code>a</code>的值变为<code>a # b</code>，第二句执行时<code>b</code>的值被赋为<code>a # b $ b</code>，由于$与#互逆，则<code>a # b $ b = a</code>，所以<code>b</code>的值被赋为<code>a</code>变量的初值，同理，第三行使<code>a</code>被赋值为<code>b</code>变量的初值</p>
<p>正因为异或运算的逆运算是其本身，才会有看起来这样离谱的交换代码</p>
<p>同样是这个本质，加减互为逆运算，用起来就不会像异或这样看起来十分离谱<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a += b;</span><br><span class="line">b = a - b;</span><br><span class="line">a -= b;</span><br></pre></td></tr></table></figure></p>
<h1 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h1><p>所有运算后赋值操作&lt;或&lt;异或&lt;与&lt;左移=右移&lt;其他所有除括号以外的运算&lt;取反&lt;括号</p>
<p><del>括号yyds</del></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单陈述了C语言基础知识位运算，并对异或运算进行了小小的拓展，尽可能浅显地使阅读本文的诸君理解位运算，望共勉之</p>
<p>P.S. 笔者如有陈述不周之处还望斧正</p>
]]></content>
      <categories>
        <category>C语言基础</category>
      </categories>
      <tags>
        <tag>初学者</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, the cruel World</title>
    <url>/2021/10/26/Hello-World/</url>
    <content><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><p>随缘更新，请见谅</p>
]]></content>
  </entry>
  <entry>
    <title>素数筛算法浅谈</title>
    <url>/2021/11/02/prime/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>素数筛是一种快速筛选出2~n（设给定的上界为n）的算法，在许多的数论算法中都有较为广泛的应用</p>
<span id="more"></span>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>埃氏筛是一种朴素的筛素数的算法，由希腊数学家埃拉托斯特尼所提出，因而得名。它的算法思想是这样的：要得到自然数n以内的全部素数，必须把不大于$\sqrt{n}$的所有素数的倍数剔除，剩下的就是素数。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>它实现的思路也相对简单</p>
<p>以<code>n = 20</code>为例，对于序列</p>
<p>$$2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20$$</p>
<p>从前往后遍历，第一个数是2，将其列为素数，并删去序列中2的所有倍数，余下的数组成新的序列</p>
<p>$$2,3,5,7,9,11,13,15,17,19$$</p>
<p>而后遍历至3，将其列为素数，并删去序列中3的所有倍数……重复该过程直至$\lfloor{\sqrt{n}}\rfloor$</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>代码实现也非常简单<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里给到的是最优化的埃氏筛，就不列出退化的算法了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> notprime[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i])</span><br><span class="line">            <span class="keyword">for</span> (j = i * i; j &lt;= n; j += i)</span><br><span class="line">                notprime[j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="复杂度及其优劣"><a href="#复杂度及其优劣" class="headerlink" title="复杂度及其优劣"></a>复杂度及其优劣</h3><p>埃氏筛的复杂度为$O(n\log{\log{n}})$，由如下公式计算得出</p>
<p>$$M=\lim_{n \to \infty}(\sum_{p \le n}\frac{1}{p}-\ln{(\ln{(n)})})$$</p>
<p>其中$M$为<a href="https://zh.wikipedia.org/zh-hans/Meissel-Mertens%E5%B8%B8%E6%95%B0">Meissel–Mertens常数</a>，$p$为质数</p>
<p>但是，埃氏筛仍然会有不少无谓的损耗，比如，12既会被2筛一次，又会被3筛一次，因而在数据量较大时仍有超时风险，容易被毒瘤数据卡，另外一种筛法<strong>欧拉筛</strong>就可以减少这样的损耗，因而更快。</p>
<h2 id="欧拉筛（线性筛）"><a href="#欧拉筛（线性筛）" class="headerlink" title="欧拉筛（线性筛）"></a>欧拉筛（线性筛）</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>欧拉筛，又叫线性筛，这个别名正是因为它能在$O(n)$的线性时间内筛出2~n的所有素数，较埃氏筛更优</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>我们在筛选的同时，维护一个素数序列，将所有筛得的素数都加入到该序列中</p>
<p>仍以<code>n = 20</code>为例，对于序列</p>
<p>$$2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20$$<br>$$primes:()$$</p>
<p>从前往后遍历，第一个数是2，将其加入到素数序列中</p>
<p>$$2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20$$<br>$$primes:(2)$$</p>
<p>然后用当前遍历的数<code>2</code>去乘更新后的素数序列中的每一个素数，并将所得的结果<code>2*2=4</code>标记为非素数</p>
<p>接下来是3，因为并未被标记为非素数，将其加入到素数序列中</p>
<p>$$2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20$$<br>$$primes:(2,3)$$</p>
<p>用当前遍历的数<code>3</code>去乘更新后的素数序列中的每一个素数，将所得结果<code>3*2=6</code>、<code>3*3=9</code>标记为非素数</p>
<p>下一个数是合数4，已经被标记为非素数，因而直接用<code>4</code>去乘素数序列中的素数，关键来了：</p>
<p>我们知道，$12=2*6=3*4$，那么12是不是会4和6被筛两次呢？复杂度是不是又退化了？</p>
<p>并不是的，当我们遍历到某个合数时，仍然用它去乘素数序列中的素数，但为了防止上述如12那样的情况出现，我们增加一个限制条件</p>
<p>对于合数$x$，在遍历至素数序列中的素数$p$时，若发现$p|x$，则结束对$x$的处理，继续遍历下一个数</p>
<p>上述的语句等效于素数$p$是合数$x$的最小质因数，也就是说有等式$x=k*p$，而对于$x$的任意倍数，均有$p$为其最小质因数，因而我们通过上述处理保证了每一个合数仅被其最小质因数筛去，从而避免了无端的损耗。</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>非常简单，只需要将思路所用的自然语言翻译即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> notprime[], <span class="keyword">int</span> prime[], <span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i]) prime[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            notprime[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>素数筛的泛用性自不必多说，本文简述了两种素数筛算法，希望能帮助阅读本文的诸君加深对其的了解和对算法发自内心的热爱，谨以此文献给真正热爱Coding的人，望共勉。</p>
<p>P.S. 笔者如有陈述不周之处还望斧正</p>
]]></content>
      <categories>
        <category>算法学习笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>素数筛</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂算法浅谈</title>
    <url>/2021/10/27/Quickpow/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>快速幂是一种简单有效的高次幂算法，可以在$O(log\ n)$的时间里快速计算高次幂</p>
<p>它是一种常见而且应用广泛的算法，在多种境地都能见到它的身影</p>
<span id="more"></span>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们知道，C语言中，要计算某个数的高次幂，比如x的n次幂，有两种相当简单的方法</p>
<p>其一，就是利用循环，暴力循环n次，每次对结果乘上x，复杂度$O(n)$</p>
<p>其二，则是引用<code>math.h</code>头文件，利用自带的pow函数进行计算</p>
<p>但是我们也知道，这两种算法都较慢，在n相当大时，很容易超时</p>
<p>由此我们就需要一个更优的算法，也即本文所述的快速幂算法</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>以13的59次幂为例，对于指数59，有如下等式</p>
<p>$$59=2^5+2^4+2^3+2^1+2^0$$</p>
<p>也即</p>
<p>$$(59)_{10}=(111011)_2$$</p>
<p>因此</p>
<p>$$13^{59}=(((((13)^2*13)^2*13)^2)^2*13)^2*13$$</p>
<p>也可写作</p>
<p>$$13^{59}=13*(13)^2*(13)^8*(13)^{16}*(13)^{32}$$</p>
<p>快速幂的思路，就是将较大的指数二分为多个较小的指数之和，进而计算出完整的高次幂</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>由等式</p>
<p>$$13^{59}=(((((13)^2*13)^2*13)^2)^2*13)^2*13$$</p>
<p>很容易想到递归方程如下</p>
<p>$$<br>x^n=\begin{cases}<br>    x^{n-1}*a, &amp; \text{if n % 2 != 0}<br>    \\<br>    (x^{n/2})^2, &amp; \text{if n % 2 == 0 &amp;&amp; n != 0}<br>    \\<br>    1, &amp; \text{if n == 0}<br>    \end{cases}<br>$$</p>
<p>而其代码实现也非常简单，只需按照递归方程写即可，如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;                           <span class="comment">// 递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> quick_pow(x, n - <span class="number">1</span>) * x; <span class="comment">// n为奇数</span></span><br><span class="line">    <span class="keyword">int</span> tmp = quick_pow(x, n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp * tmp;                               <span class="comment">// n为偶数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这其中，<code>tmp</code>变量不可省略，否则在最后一个<code>return</code>处会因调用两次<code>quick_pow</code>从而把复杂度退化回$O(n)$</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>由等式</p>
<p>$$13^{59}=13*(13)^2*(13)^8*(13)^{16}*(13)^{32}$$</p>
<p>可以得到平方底数得到新底数计算快速幂的方法</p>
<p>代码实现如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res *= x;    <span class="comment">// n在二进制下末位为1</span></span><br><span class="line">        x *= x;                 <span class="comment">// 底数平方</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;                <span class="comment">// n 右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快速幂算法是一种简单而高效的算法，本文简单陈述了其原理及实现，而快速幂仅仅只是众多令人着迷的算法中的一个，还希望与阅读本文的诸君共勉，一同去探索无尽的算法世界。</p>
<p>P.S. 笔者如有陈述不周之处还望斧正</p>
]]></content>
      <categories>
        <category>算法学习笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>快速幂</tag>
      </tags>
  </entry>
</search>
